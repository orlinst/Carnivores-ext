knitr::opts_chunk$set(echo = TRUE)
speciesE <- read.delim("speciesE.txt", header=T)
require(phytools
)
tree <- read.nexus("CompletePhyCarn.nex")
fastBM(tree)
fastBM(tree[[1]])
a <- fastBM(tree[[1]])
phylosig(tree,a,method="lambda",test=TRUE)
phylosig(tree[[1]],a,method="lambda",test=TRUE)
fastBM(tree[[1]])
phylosig(tree[[1]],a,method="lambda",test=TRUE)
phylosig(tree[[1]],speciesE$mass.g,method="lambda",test=TRUE)
phylosig(tree[[2]],speciesE$mass.g,method="lambda",test=TRUE)
clean <- clean.data(data_final, tree)
require(mulTree)
clean <- clean.data(data_final, tree)
clean <- clean.data(data_speciesE, tree)
clean <- clean.data(speciesE, tree)
tree <- clean$tree
tree1 <- clean$tree[[2]]
data <- clean$data
require(phytools)
require(mulTree)
tree <- read.nexus("CompletePhyCarn.nex")
data_final <- read.delim("carn-ext.txt", header=T)
rownames(data_final) <- data_final$species_name
data_final$extant <- as.factor(data_final$extant)
data_final$loctype <- as.factor(data_final$loctype)
data_final$diet.cat <- as.factor(data_final$diet.cat)
clean <- clean.data(data_final, tree)
tree <- clean$tree
tree1 <- clean$tree[[2]]
data <- clean$data
phylosig(tree,data$mass.g,method="lambda",test=TRUE)
phylosig(tree1,data$mass.g,method="lambda",test=TRUE)
phylosig(tree1,data$brain,method="lambda",test=TRUE)
phylosig(tree1,data$loctype,method="lambda",test=TRUE)
phylosig(tree1,data$litter,method="lambda",test=TRUE)
phylosig(tree1,data$home.range,method="lambda",test=TRUE)
phylosig(tree1,data$abundance,method="lambda",test=TRUE)
phylosig(tree1,data$abundance,method="kappa",test=TRUE)
phylosig(tree1,data$abundance,method="kapa",test=TRUE)
phylosig(tree1,data$abundance,method="K",test=TRUE)
phylosig(tree1,data$mass.g,method="K",test=TRUE)
phylosig(tree1,data$mass.g,method="lambda",test=TRUE)
plot(tree1)
install.packages(c("adegenet", "aplot", "bayestestR", "brew", "brms", "classInt", "cli", "commonmark", "correlation", "cpp11", "crayon", "curl", "data.table", "datawizard", "devtools", "digest", "effectsize", "evaluate", "gert", "ggcorrplot", "ggforce", "ggraph", "ggridges", "ggsignif", "ggstatsplot", "graphlayouts", "igraph", "insight", "isoband", "jsonlite", "lifecycle", "lpSolve", "mnormt", "openssl", "parameters", "performance", "phangorn", "pracma", "projpred", "psych", "purrr", "ragg", "raster", "RcppArmadillo", "readr", "rlang", "rmarkdown", "see", "shinyWidgets", "spdep", "statsExpressions", "sys", "testthat", "tidyselect", "tinytex", "tseries", "vctrs", "vegan", "vroom", "wk", "xfun", "XML", "xts", "yaml", "zoo"))
install.packages(c("cli", "data.table", "devtools", "digest", "ggsignif", "ggstatsplot", "igraph", "mnormt", "purrr", "rlang", "vctrs", "xfun", "XML"))
install.packages(c("cli", "data.table", "devtools", "digest", "ggsignif", "ggstatsplot", "igraph", "mnormt", "purrr", "rlang", "vctrs", "xfun", "XML"))
install.packages(c("cli", "digest"))
install.packages("cli")
install.packages("cli")
install.packages("cli")
unlist("cli")
detach(cli)
detach("cli")
detach("package:cli", unload=TRUE)
detach("cli", unload=TRUE)
unloadNamespace("cli")
install.packages("cli")
install.packages(c("cli", "digest"))
install.packages(c("cli", "digest"))
knitr::opts_chunk$set(echo = TRUE)
require(psych)
speciesE <- read.delim("speciesE.txt", header=T)
rownames(speciesE) <- speciesE$species_name
#defining var class
speciesE$extant <- as.factor(speciesE$extant)
speciesE$loctype <- as.factor(speciesE$loctype)
speciesE$diet.cat <- as.factor(speciesE$diet.cat)
noonan_tables1 <- as.data.frame(noonan_tables1)
library(readxl)
noonan_tables1 <- read_excel("D:/Dropbox/05. Github/Sydney/Data/raw/datasets misc/noonan_tables1.xlsx")
View(noonan_tables1)
data <- noonan_tables1[, 5:15] #activity vars
View(data)
rownames(data) <- paste(noonan_tables1[,'Genus'], noonan_tables1[,'Species'])
noonan_tables1
data <- noonan_tables1[, 5:15] #activity vars
rownames(data) <- paste(noonan_tables1[,'Genus'], noonan_tables1[,'Species'])
class(noonan_tables1)
noonan_tables1 <- as.data.frame(noonan_tables1)
class(noonan_tables1)
class(data)
data <- noonan_tables1[, 5:15] #activity vars
class(data)
rownames(data) <- paste(noonan_tables1[,'Genus'], noonan_tables1[,'Species'])
pc <- princomp(na.omit(data))
pc_noonan <- pc$scores[,1]
names(pc_noonan) <- rownames(pc$scores)
summarey(pc)
summary(pc)
loadings(pc)
require(phytools)
require(mulTree)
tree <- read.nexus("CompletePhyCarn.nex")
data_final <- read.delim("carn-ext.txt", header=T)
rownames(data_final) <- data_final$species_name
require(mice)
require(narnia)
require(naniar)
miss_vis(data_final)
gg_miss_var(data_final)
vis_miss(data_final)
vis_miss(speciesE)
gg_miss_var(data_final, sort_miss = TRUE)
vis_miss(data_final, sort_miss = TRUE)
list.functions.in.file(filename, alphabetic = TRUE)
install.packages("NCmisc")
require("NCmisc")
list.functions.in.file(rstudioapi::getSourceEditorContext()$path, alphabetic = TRUE)
list.functions.in.file(filename, alphabetic = TRUE)
list.functions.in.file(code1, alphabetic = TRUE)
list.functions.in.file(code1.rmd, alphabetic = TRUE)
list.functions.in.file(code1.Rmd, alphabetic = TRUE)
setwd("D:/Dropbox/05. Github/Sydney/Analyses")
list.functions.in.file(code1.Rmd, alphabetic = TRUE)
list.functions.in.file("code1.Rmd", alphabetic = TRUE)
install.package("renv"")
install.package("renv")
install.packages("renv")
require("renv")
renv::dependencies
dependencies
renv::dependencies()
sessionInfo()
R --version
--version
version$version.string
version$
print(paste("R", getRversion()))
print("-------------")
for (package_name in sort(loadedNamespaces())) {
print(paste(package_name, packageVersion(package_name)))
}
require(phylolm)
print(paste("R", getRversion()))
print("-------------")
for (package_name in sort(loadedNamespaces())) {
print(paste(package_name, packageVersion(package_name)))
}
require(easystats)
require(phylolm)
print(paste("R", getRversion()))
print("-------------")
for (package_name in sort(loadedNamespaces())) {
print(paste(package_name, packageVersion(package_name)))
}
require(vegan)
print(paste("R", getRversion()))
print("-------------")
for (package_name in sort(loadedNamespaces())) {
print(paste(package_name, packageVersion(package_name)))
}
require(BAMMtools)
print(paste("R", getRversion()))
print("-------------")
for (package_name in sort(loadedNamespaces())) {
print(paste(package_name, packageVersion(package_name)))
}
require(ggtree)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ggtree")
require(ggtree)
require(semTools)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ggtree")
print(paste("R", getRversion()))
print("-------------")
for (package_name in sort(loadedNamespaces())) {
print(paste(package_name, packageVersion(package_name)))
}
View(data_final)
All.Carnivore.BMR.Final <- read.delim("D:/Dropbox/05. Github/Sydney/Data/raw/datasets misc/All Carnivore BMR Final.txt")
View(All.Carnivore.BMR.Final)
knitr::opts_chunk$set(echo = TRUE)
data_final <- read.delim("carn-ext.txt", header=T)
w <- match(data_final$species, All.Carnivore.BMR.Final$species_name) #match names
w1 <- match(data_final$species, All.Carnivore.BMR.Final$synonym) #match synonyms
data_final$BMR <- All.Carnivore.BMR.Final$BMR_mlO2.h[w]
data_final$BMR1 <- All.Carnivore.BMR.Final$BMR_mlO2.h[w1]
data_final$BMR[is.na(data_final$BMR)] = data_final$BMR1[!is.na(speciesE$BMR1)]
View(data_final)
w <- match(data_final$species, All.Carnivore.BMR.Final$species_name) #match names
w1 <- match(data_final$species, All.Carnivore.BMR.Final$synonym) #match synonyms
data_final$BMR <- All.Carnivore.BMR.Final$BMR_mlO2.h[w]
data_final$BMR1 <- All.Carnivore.BMR.Final$BMR_mlO2.h[w1]
data_final$BMR[is.na(data_final$BMR)] = data_final$BMR1[!is.na(data_final$BMR1)]
All.Carnivore.BMR.Final.mass <- read.delim("D:/Dropbox/05. Github/Sydney/Data/raw/datasets misc/All Carnivore BMR Final mass.txt")
View(All.Carnivore.BMR.Final.mass)
data_final$mass <- All.Carnivore.BMR.Final.mass$mass_g[w]
data_final$mass1 <- All.Carnivore.BMR.Final.mass$mass_g[w1]
data_final$mass[is.na(data_final$mass)] = data_final$mass1[!is.na(data_final$mass1)]
View(data_final)
data_final$BMR1 <- NULL
data_final$mass1 <- NULL
data_final$mass <- log(data_final$mass)
data_final$BMR <- log(data_final$BMR)
cor(data_final$mass.g, data_final$mass)
cor(data_final$mass.g, data_final$mass, method="pearson")
cor(data_final$mass.g, data_final$mass, method=c("pearson"))
cor.test(data_final$mass.g, data_final$mass, method=c("pearson"))
normalize <- function(x, ...) {
return((x - min(x, ...)) /(max(x, ...) - min(x, ...)))
}
data_final$BMR <- normalize(data_final$BMR)
data_final$mass <- normalize(data_final$mass)
View(data_final)
write.table(data_final, "carn-ext.txt", sep = "\t", row.names = FALSE)
require("ape")
tree <- read.nexus("CompletePhyCarn.nex")
tree1 <- clean$tree[[2]]
require(phytools)
require(mulTree)
clean <- clean.data(data_final, tree)
tree <- clean$tree
tree1 <- clean$tree[[2]]
data <- clean$data
tree <- read.nexus("CompletePhyCarn.nex")
data_final <- read.delim("carn-ext.txt", header=T)
rownames(data_final) <- data_final$species_name
clean <- clean.data(data_final, tree)
tree <- clean$tree
tree1 <- clean$tree[[2]]
data <- clean$data
View(data_final)
pglsModel <- gls(BMR ~ mass, correlation = corBrownian(phy = tree1),
data = data_final, method = "ML")
require(ape)
pglsModel <- gls(BMR ~ mass, correlation = corBrownian(phy = tree1),
data = anoleData, method = "ML")
library(ape)
library(geiger)
library(nlme)
library(phytools)
pglsModel <- gls(BMR ~ mass, correlation = corBrownian(phy = tree1),
data = anoleData, method = "ML")
pglsModel <- gls(BMR ~ mass, correlation = corBrownian(phy = tree1),
data = data_final, method = "ML")
pglsModel <- gls(BMR ~ mass, correlation = corBrownian(phy = tree1),
data = data_final, method = "ML", form = species_name)
model <- gls(BMR ~ mass, data=data_finals, correlation=corPagel(1,tree1))
model <- gls(BMR ~ mass, data=data_final, correlation=corPagel(1,tree1))
rownames(data_final) <- data_final$species_name
model <- gls(BMR ~ mass, data=data_final, correlation=corPagel(1,tree1))
pglsmodel <- comparative.data(tree1, data_final, Species_name, vcv=TRUE, vcv.dim=3)
require(caper)
pglsmodel <- comparative.data(tree1, data_final, Species_name, vcv=TRUE, vcv.dim=3)
pglsmodel <- comparative.data(tree1, data_final, species_name, vcv=TRUE, vcv.dim=3)
mod1 <- pgls(BMR ~ mass, data_final, lambda='ML')
mod1 <- pgls(BMR ~ mass, pglsmodel, lambda='ML')
summary(mod1)
mod1$residuals
pglsmodel <- comparative.data(tree1, data_final, species_name, vcv=TRUE)
mod1 <- pgls(BMR ~ mass, pglsmodel, lambda='ML')
View(data_final)
plot(tree1)
pglsmodel <- comparative.data(tree1, data_final, species_name)
mod1 <- pgls(BMR ~ mass, pglsmodel, lambda='ML')
View(pglsmodel)
pglsmodel <- comparative.data(tree1, data=data_final, species_name)
pglsmodel <- comparative.data(tree[[5]], data=data_final, species_name)
pglsmodel <- NULL
pglsmodel <- comparative.data(tree[[5]], data=data_final, species_name)
bm.carn <- corBrownian(phy = tree1)
bm.gls <- gls(BMR ~ mass, correlation = bm.carn, data = data_final)
pglsmodel <- comparative.data(data = data_final, phy = tree1, names.col = "species_name")
pglsmodel <- NULL
pglsmodel <- comparative.data(data = data_final, phy = tree1, names.col = "species_name")
require(phytools)
require(mulTree)
tree <- read.nexus("CompletePhyCarn.nex")
data_final <- read.delim("carn-ext.txt", header=T)
rownames(data_final) <- data_final$species_name
clean <- clean.data(data_final, tree)
tree <- clean$tree
tree1 <- clean$tree[[2]]
data <- clean$data
pglsmodel <- comparative.data(data = data_final, phy = tree1, names.col = "species_name")
pglsmodel <- comparative.data(data = data_final, phy = tree1, names.col = "species")
rownames(data_final)
clean <- clean.data(data_final, tree)
tree <- clean$tree
tree1 <- clean$tree[[2]]
tree1
data <- clean$data
pglsmodel <- comparative.data(data = data_final, phy = tree1, names.col = "species_name")
pglsmodel <- comparative.data(data = data_final, phy = tree1, names.col = "species")
pglsmodel <- comparative.data(data = data_final, phy = tree1, names.col = "Species_name")
pglsmodel <- comparative.data(data = data_final, phy = tree1, names.col = "species_name")
require(phylolm)
aa <- phylolm(BMR ~ mass, data_final, tree1)
summary(aa)
aa
data_final$BMRres2 <- aa$residuals
data_final$BMRres2[data_final$species_name] <- aa$residuals[data_final$species_name]
aa$residuals
View(data_final)
write.table(data_final, "carn-ext.txt", sep = "\t", row.names = FALSE)
require(phytools)
require(mulTree)
tree <- read.nexus("CompletePhyCarn.nex")
data_final <- read.delim("carn-ext.txt", header=T)
rownames(data_final) <- data_final$species_name
data_final$extant <- as.factor(data_final$extant)
data_final$loctype <- as.factor(data_final$loctype)
data_final$diet.cat <- as.factor(data_final$diet.cat)
data_final$activity <- as.factor(data_final$activity)
#data_final$soc.complexity <- as.factor(data_final$soc.complexity)
data_final$afrotropic <- as.factor(data_final$afrotropic)
data_final$australasia <- as.factor(data_final$australasia)
data_final$indomalaya <- as.factor(data_final$indomalaya)
data_final$neotropic <- as.factor(data_final$neotropic)
data_final$nearctic <- as.factor(data_final$nearctic)
data_final$palearctic <- as.factor(data_final$palearctic)
clean <- clean.data(data_final, tree)
tree <- clean$tree
tree1 <- clean$tree[[2]]
data <- clean$data
imp <- mice(data_final, 20, maxit = 100, method = c("", "", "midastouch", "midastouch", "logreg", "polyreg", "midastouch", "midastouch", "polyreg", "midastouch", "midastouch", "midastouch", "midastouch", "polyreg", "midastouch", "midastouch", "midastouch", "midastouch", "midastouch", "midastouch", "midastouch", "logreg", "logreg","logreg","logreg","logreg","logreg"))
require(mice)
imp <- mice(data_final, 20, maxit = 100, method = c("", "", "midastouch", "midastouch", "logreg", "polyreg", "midastouch", "midastouch", "polyreg", "midastouch", "midastouch", "midastouch", "midastouch", "polyreg", "midastouch", "midastouch", "midastouch", "midastouch", "midastouch", "midastouch", "midastouch", "logreg", "logreg","logreg","logreg","logreg","logreg"))
save(imp, file = "imp20x100.RData")
plot(imp)
densityplot(imp)
imp <- mice(data_final, 20, maxit = 10, method = c("", "", "midastouch", "midastouch", "logreg", "polyreg", "midastouch", "midastouch", "polyreg", "midastouch", "midastouch", "midastouch", "midastouch", "polyreg", "midastouch", "midastouch", "midastouch", "midastouch", "midastouch", "midastouch", "midastouch", "logreg", "logreg","logreg","logreg","logreg","logreg"))
densityplot(imp)
plot(imp)
View(data_final)
