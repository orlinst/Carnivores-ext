loctype <- table(1:128, n)
m1 = matrix(unlist(loctype), nrow(loctype), ncol(loctype), dimnames=list(1:128, colnames(loctype)))
n = data.matrix(get(paste0("dataX", j))[,c(12)])
diet.cat <- table(1:128, n)
m2 = matrix(unlist(diet.cat), nrow(diet.cat), ncol(diet.cat), dimnames=list(1:128, colnames(diet.cat)))
n = data.matrix(get(paste0("dataX", j))[,c(15)])
activity <- table(1:128, n)
m3 = matrix(unlist(activity), nrow(activity), ncol(activity), dimnames=list(1:128, colnames(activity)))
n = data.matrix(get(paste0("dataX", j))[,c(16)])
soc <- table(1:128, n)
m4 = matrix(unlist(soc), nrow(soc), ncol(soc), dimnames=list(1:128, colnames(soc)))
d[[j]] = data.matrix(get(paste0("dataX", j))[,c(5:10,13,14,17:27)])
tempx = cbind(d[[j]], m1, m2, m3, m4)
d0 = data.matrix(dataX1)
m = lsolm(d0[,3] ~ ., data = data.frame(tempx),summary=F)$rotated.matrix
rownames(m) <- dataX1$species_name
cat(colnames(d)[i],'\n')
#for (i in 1:ncol(m)) {
#add var numbers
for (i in 1:40) {
p[i,j] <- summary(glm(as.factor(d0[,3]) ~ m[,i],family='binomial'))$coefficients[2,4]
s[i,j] <- summary(glm(as.factor(d0[,3]) ~ m[,i],family='binomial'))$coefficients[2,1]
summary[i,] <- summary(glm(as.factor(d0[,3]) ~ m[,i],family='binomial'))
stdevs <- which(rowSds(t(m))!=0)
w = as.array(m[,i])
dimnames(w) <- list(data_final$species_name)
temp = cbind(m[,i], as.integer(data_final$extant)) #)-1)
colnames(temp) = c("whateva", "extant")
rownames(temp) = rownames(m)}}
head(d2)
lsolm(extant ~ ., data = d2)
lsolm(extant ~ ., data = data.frame(d2))
lsolm(d0[,3] ~ ., data = data.frame(d2))
dim(data_final)
require(naniar)
require(mice)
vis_miss(data_final)
gg_miss_var(data_final)
gg_miss_upset(data_final)
n_var_miss(data_final)
miss_var_table(data_final)
summary(data_final)
mcar_test(data_final)
load("./imp20x100.Rdata")
setwd("D:/Dropbox/05. Github/Sydney/Analyses")
load("./imp20x100.Rdata")
save.image("D:/Dropbox/05. Github/Sydney/Analyses/workspace.RData")
require(sensiPhy)
miss.phylo.d(data_final, tree[[1]])
rownames(data_final) <- data_final$species_name
miss.phylo.d(data_final, tree[[1]])
miss.phylo.d(data_final[4:23], tree[[1]])
miss.phylo.d(data_final[5:22], tree[[1]])
phylo.d2<- function (data, phy, names.col, binvar, permut = 1000, rnd.bias = NULL)
{
if (!missing(data)) {
if (!inherits(data, "comparative.data")) {
if (missing(names.col))
stop("names column is missing")
names.col <- deparse(substitute(names.col))
data <- caicStyleArgs(data = data, phy = phy, names.col = names.col)
}
}
binvar <- binvar
bininds <- match(binvar, names(data$data))
if (is.na(bininds))
(stop("'", binvar, "' is not a variable in data."))
ds <- data$data[, bininds]
if (any(is.na(ds)))
stop("'", binvar, "' contains missing values.")
if (is.character(ds))
ds <- as.factor(ds)
if (length(unique(ds)) > 2)
stop("'", binvar, "' contains more than two states.")
if (length(unique(ds)) < 2)
stop("'", binvar, "' only contains a single state.")
propStates <- unclass(table(ds))
propState1 <- propStates[1]/sum(propStates)
names(dimnames(propStates)) <- binvar
if (is.factor(ds))
ds <- as.numeric(ds)
if (!is.numeric(permut))
(stop("'", permut, "' is not numeric."))
if (!is.null(rnd.bias)) {
rnd.bias <- deparse(substitute(rnd.bias))
rnd.ind <- match(rnd.bias, names(data$data))
if (is.na(rnd.ind))
(stop("'", rnd.bias, "' is not a variable in data."))
rnd.bias <- data$data[, rnd.bias]
}
el <- data$phy$edge.length
elTip <- data$phy$edge[, 2] <= length(data$phy$tip.label)
if (any(el[elTip] == 0))
stop("Phylogeny contains pairs of tips on zero branch lengths, cannot currently simulate")
if (any(el[!elTip] == 0))
stop("Phylogeny contains zero length internal branches. Use di2multi.")
ds.ran <- replicate(permut, sample(ds, prob = rnd.bias))
if (is.null(data$vcv)) {
vcv <- VCV.array(data$phy)
}
else {
vcv <- data$vcv
}
ds.phy <- rmvnorm(permut, sigma = unclass(vcv))
ds.phy <- as.data.frame(t(ds.phy))
ds.phy.thresh <- apply(ds.phy, 2, quantile, propState1)
ds.phy <- sweep(ds.phy, 2, ds.phy.thresh, "<")
ds.phy <- as.numeric(ds.phy)
dim(ds.phy) <- dim(ds.ran)
ds.ran <- cbind(Obs = ds, ds.ran)
ds.phy <- cbind(Obs = ds, ds.phy)
dimnames(ds.ran) <- dimnames(ds.phy) <- list(data$phy$tip.label,
c("Obs", paste("V", 1:permut, sep = "")))
phy <- reorder(data$phy, "pruningwise")
ds.ran.cc <- contrCalc(vals = ds.ran, phy = phy, ref.var = "V1",
picMethod = "phylo.d", crunch.brlen = 0)
ds.phy.cc <- contrCalc(vals = ds.phy, phy = phy, ref.var = "V1",
picMethod = "phylo.d", crunch.brlen = 0)
ransocc <- colSums(ds.ran.cc$contrMat)
physocc <- colSums(ds.phy.cc$contrMat)
if (round(ransocc[1], digits = 6) != round(physocc[1], digits = 6))
stop("Problem with character change calculation in phylo.d")
obssocc <- ransocc[1]
ransocc <- ransocc[-1]
physocc <- physocc[-1]
soccratio <- (obssocc - mean(physocc))/(mean(ransocc) -
mean(physocc))
soccpval1 <- sum(ransocc < obssocc)/permut
soccpval0 <- sum(physocc > obssocc)/permut
dvals <- list(DEstimate = soccratio, Pval1 = soccpval1,
Pval0 = soccpval0, Parameters = list(Observed = obssocc,
MeanRandom = mean(ransocc), MeanBrownian = mean(physocc)),
StatesTable = propStates, Permutations = list(random = ransocc,
brownian = physocc), NodalVals = list(observed = ds.ran.cc$nodVal[,
1, drop = FALSE], random = ds.ran.cc$nodVal[, -1,
drop = FALSE], brownian = ds.phy.cc$nodVal[, -1,
drop = FALSE]), binvar = binvar, data = data, nPermut = permut,
rnd.bias = rnd.bias)
class(dvals) <- "phylo.d"
return(dvals)
}
miss.phylo.d2<-function(data, phy,...){
sp.nam <- NULL
names.col <- NULL
#error check
if (class(data) != "data.frame") stop("data must be class 'data.frame'")
if (class(phy) != "phylo") stop("phy must be class 'phylo'")
#calculate % of NAs per trait
tot.sp <- nrow(data)
nNA <- colSums(is.na(data))
percNA <- round(nNA/tot.sp*100,digits=2)
print("Percentage of missing data in traits:")
print(percNA)
#remove factor columns (categorical traits)
factCols <- sapply(data,is.factor)
data <- data[,!factCols]
#recode traits with missing data into binary
data[!is.na(data)] <- 0
data[is.na(data)] <- 1
#match with phylogeny
if(is.null("names.col")){
compdat<-caper::comparative.data(phy,data,names.col=names.col)}
if(!is.null("names.col")){
data$sp.nam<-row.names(data)
compdat<-caper::comparative.data(phy,data,names.col=sp.nam)}
#calculate d statistic using caper::phylo.d
d.stat<-phylo.d2(compdat,...)
}
miss.phylo.d2(data_final[5:22], tree[[1]])
miss.phylo.d2(data_final[5:22], tree[[1]], binvar = extant)
miss.phylo.d2(data_final, tree[[1]], binvar = extant)
miss.phylo.d2(data_final, tree[[1]], binvar = "extant")
miss.phylo.d2(data_final, tree[[1]], binvar = "BMR")
require(caper)
miss.phylo.d2(data_final, tree[[1]], binvar = "BMR")
asd123 <- miss.phylo.d2(data_final, tree[[1]], binvar = "BMR")
asd123
asd123 <- miss.phylo.d2(data_final, tree[[1]], binvar = "mass")
asd123 <- miss.phylo.d2(data_final, tree[[1]], binvar = "mass.g")
asd123
asd123 <- miss.phylo.d2(data_final, tree[[1]], binvar = "BMR")
asd123
asd123 <- miss.phylo.d2(data_final, tree[[1]], binvar = "EQ")
asd123 <- miss.phylo.d2(data_final, tree[[1]], binvar = "eq")
asd123 <- miss.phylo.d2(data_final, tree[[1]], binvar = "EQ")
asd123 <- miss.phylo.d2(data_final, tree[[1]], binvar = "eq")
asd123
asd123 <- miss.phylo.d2(data_final, tree[[1]], binvar = "abundance")
asd123
asd123 <- miss.phylo.d2(data_final, tree[[1]], binvar = "density")
asd123
asd123 <- miss.phylo.d2(data_final, tree[[1]], binvar = "home.range")
asd123
asd123 <- miss.phylo.d2(data_final, tree[[1]], binvar = "diet.cat")
asd123
asd123 <- miss.phylo.d2(data_final, tree[[1]], binvar = "shannon")
asd123
asd123 <- miss.phylo.d2(data_final, tree[[1]], binvar = "simpson")
asd123
asd123 <- miss.phylo.d2(data_final, tree[[1]], binvar = "activity")
asd123
asd123 <- miss.phylo.d2(data_final, tree[[1]], binvar = "soc.complexity")
asd123
asd123 <- miss.phylo.d2(data_final, tree[[1]], binvar = "gr.size")
asd123
asd123 <- miss.phylo.d2(data_final, tree[[1]], binvar = "ges.length")
asd123 <- miss.phylo.d2(data_final, tree[[1]], binvar = "ges.days")
asd123 <- miss.phylo.d2(data_final, tree[[1]], binvar = "ges.length")
asd123
asd123 <- miss.phylo.d2(data_final, tree[[1]], binvar = "interbirth.days")
asd123
asd123 <- miss.phylo.d2(data_final, tree[[1]], binvar = "weaning.days")
asd123
asd123 <- miss.phylo.d2(data_final, tree[[1]], binvar = "longevity")
asd123
asd123 <- miss.phylo.d2(data_final, tree[[1]], binvar = "litter")
asd123
require(phytoools)
require(phytools)
phylosig(tree[[1]], data_final$mass.g, method="K", test=FALSE, nsim=1000)
d1 <- data_final$BMR
rownames(d1) <- data_final$species_name
d1 <- as.data.frame(data_final$BMR)
rownames(d1) <- data_final$species_name
phylosig(tree[[1]], d1, method="K", test=FALSE, nsim=1000)
phylosig(tree[[2]], d1, method="K", test=FALSE, nsim=1000)
tree
tree[[1]]
phylosig(tree[[2]], d1, method="lambda")
phylosig(tree[[2]], d1, method="lambda", test = TRUE)
tree <- tree[[15]]
tree
phylosig(tree, d1, method="lambda", test = TRUE)
d1
phylosig(tree, d1, method="lambda", test = TRUE)
require(motmot)
lambda.ml <- transformPhylo.ML(phy = tree, y = d1, model = "lambda")
lambda.ml <- transformPhylo.ML(phy = tree, y = matrix(d1), model = "lambda")
d2 <- as.matrix(d1)
d2
lambda.ml <- transformPhylo.ML(phy = tree, y = d2, model = "lambda")
tree
tree$tip.label
unique(tree$tip.label)
lambda.ml <- transformPhylo.ML(phy = tree, y = d2, model = "lambda")
tree
lambda.ml <- transformPhylo.ML(phy = tree, y = d2, model = "lambda")
phylosig(tree,d2,method="lambda",test=TRUE)
phylosig(tree,d2,method="Kappa",test=TRUE)
phylosig(tree,d2,method="K",test=TRUE)
d2 <- as.matrix(data_final$mass.g)
rownames(d2) <-data_final$species_name
phylosig(tree,d2,method="L",test=TRUE)
phylosig(tree,d2,method="lambda",test=TRUE)
1.58732e-15
phylosig(tree,d2,method="K",test=TRUE)
d2 <- as.matrix(data_final$BMR)
phylosig(tree,d2,method="lambda",test=TRUE)
rownames(d2) <-data_final$species_name
phylosig(tree,d2,method="lambda",test=TRUE)
d2
phylosig(tree,d2,method="lambda",test=TRUE)
phylosig(tree,d2,method="K",test=TRUE)
d2 <- as.matrix(data_final$eq)
rownames(d2) <-data_final$species_name
phylosig(tree,d2,method="lambda",test=TRUE)
phylosig(tree,d2,method="K",test=TRUE)
d2 <- as.matrix(data_final$abundance)
rownames(d2) <-data_final$species_name
phylosig(tree,d2,method="lambda",test=TRUE)
phylosig(tree,d2,method="K",test=TRUE)
d2 <- as.matrix(data_final$density)
rownames(d2) <-data_final$species_name
phylosig(tree,d2,method="lambda",test=TRUE)
phylosig(tree,d2,method="K",test=TRUE)
d2 <- as.matrix(data_final$home.range)
rownames(d2) <-data_final$species_name
phylosig(tree,d2,method="lambda",test=TRUE)
phylosig(tree,d2,method="K",test=TRUE)
d2 <- as.matrix(data_final$diet.cat)
rownames(d2) <-data_final$species_name
phylosig(tree,d2,method="lambda",test=TRUE)
phylosig(tree,d2,method="K",test=TRUE)
d2 <- as.matrix(data_final$shannon)
rownames(d2) <-data_final$species_name
phylosig(tree,d2,method="lambda",test=TRUE)
phylosig(tree,d2,method="K",test=TRUE)
d2 <- as.matrix(data_final$simpson)
rownames(d2) <-data_final$species_name
phylosig(tree,d2,method="lambda",test=TRUE)
phylosig(tree,d2,method="K",test=TRUE)
d2 <- as.matrix(data_final$soc.complexity)
rownames(d2) <-data_final$species_name
phylosig(tree,d2,method="lambda",test=TRUE)
phylosig(tree,d2,method="K",test=TRUE)
d2 <- as.matrix(data_final$gr.size)
rownames(d2) <-data_final$species_name
phylosig(tree,d2,method="lambda",test=TRUE)
phylosig(tree,d2,method="K",test=TRUE)
d2 <- as.matrix(data_final$ges.days)
rownames(d2) <-data_final$species_name
phylosig(tree,d2,method="lambda",test=TRUE)
phylosig(tree,d2,method="K",test=TRUE)
d2 <- as.matrix(data_final$interbirth.days)
rownames(d2) <-data_final$species_name
phylosig(tree,d2,method="lambda",test=TRUE)
phylosig(tree,d2,method="K",test=TRUE)
d2 <- as.matrix(data_final$weaning.days)
rownames(d2) <-data_final$species_name
phylosig(tree,d2,method="lambda",test=TRUE)
phylosig(tree,d2,method="K",test=TRUE)
d2 <- as.matrix(data_final$longevity)
rownames(d2) <-data_final$species_name
phylosig(tree,d2,method="lambda",test=TRUE)
phylosig(tree,d2,method="K",test=TRUE)
d2 <- as.matrix(data_final$litter)
rownames(d2) <-data_final$species_name
phylosig(tree,d2,method="lambda",test=TRUE)
phylosig(tree,d2,method="K",test=TRUE)
stripplot(imp, pch = 20, cex = 1.2)
densityplot(imp)
knitr::opts_chunk$set(echo = TRUE)
require(easystats)
require(psych)
describe_distribution(data_final
)
multi.hist(data_final[,sapply(data_final, is.numeric)], global = F)
View(data_final)
data_final$extant <- as.factor(data_final$extant)
data_final$loctype <- as.factor(data_final$loctype)
data_final$activity <- as.factor(data_final$activity)
data_final$diet.cat <- as.factor(data_final$diet.cat)
data_final$Afrotropic <- as.factor(data_final$Afrotropic)
data_final$Indomalaya <- as.factor(data_final$Indomalaya)
data_final$Nearctic <- as.factor(data_final$Nearctic)
data_final$Neotropic <- as.factor(data_final$Neotropic)
data_final$Palearctic <- as.factor(data_final$Palearctic)
data_final$IUCN.status <- as.factor(data_final$IUCN.status)
data_final$soc.complexity <- as.factor(data_final$soc.complexity)
#log and scale
data_final$mass.g <- as.vector(scale(log(data_final$mass.g)))
data_final$home.range <- as.vector(scale(log(data_final$home.range)))
data_final$BMR <- as.vector(scale(log(data_final$BMR)))
data_final$density <- as.vector(scale(log(data_final$density)))
data_final$gr.size <- as.vector(scale(log(1 + data_final$gr.size))) #due to 0s
data_final$ges.days <- as.vector(scale(log(data_final$ges.days)))
data_final$interbirth.days <- as.vector(scale(log(data_final$interbirth.days)))
data_final$weaning.days <- as.vector(scale(log(data_final$weaning.days)))
data_final$longevity <- as.vector(scale(log(data_final$longevity)))
data_final$litter <- as.vector(scale(log(data_final$litter)))
multi.hist(data_final[,sapply(data_final, is.numeric)], global = F)
lm(dataX15$IUCN.status ~ dataX15$BMR)
asd <- lm(dataX15$IUCN.status ~ dataX15$BMR)
anova(asd)
asd <- glm(dataX15$IUCN.status ~ dataX15$BMR)
asd <- glm(dataX15$IUCN.status ~ dataX15$BMR, family="binomial")
anova(asd)
asd
asd <- lm(dataX15$BMR ~ dataX15$IUCN.status)
anova(asd)
asd
asd <- lm(data_final$BMR ~ data_final$IUCN.status)
asd
anova(asd)
levels(data_final$IUCN.status)
#remove missing conepatus and felis catus
data_final1 <- data_final[-c(27,60),]
data_final1
data_final1 <- data_final[-c(27,60),]
data_final1
data_final1$IUCN.status[is.na(data_final1$IUCN.status)] = "Extinct"
data_final1$IUCN.status <- factor(data_final1$IUCN.status, levels=c("Least Concern", "Near Threatened", "Vulnerable", "Endangered", "Extinct"))
#remove missing conepatus and felis catus
data_final1 <- data_final[-c(27,60),]
data_final1$IUCN.status[is.na(data_final1$IUCN.status)] = "Extinct"
#remove missing conepatus and felis catus
data_final1 <- data_final[-c(27,60),]
data_final1$IUCN.status[is.na(data_final1$IUCN.status)]
data_final1$IUCN.status[is.na(data_final1$IUCN.status)] = "Extinct"
data_final1$IUCN.status[is.na(data_final1$IUCN.status)]
data_final1$IUCN.status
data_final1$IUCN.status[is.na(data_final1$IUCN.status)] == "Extinct"
data_final1$IUCN.status[is.na(data_final1$IUCN.status)] <- "Extinct"
class(data_final1$IUCN.status)
factor(data_final1$IUCN.status, levels = levels(addNA(data_final1$IUCN.status)), labels = c(levels(data_final1$IUCN.status), "Extinct"), exclude = NULL)
data_final1$IUCN.status <- factor(data_final1$IUCN.status, levels = levels(addNA(data_final1$IUCN.status)), labels = c(levels(data_final1$IUCN.status), "Extinct"), exclude = NULL)
data_final1$IUCN.status
asd <- lm(data_final1$BMR ~ data_final1$IUCN.status)
anova(asd)
vis_miss(data_final)
gg_miss_fct(x = data_final, fct = data_final$extant)
gg_miss_fct(x = data_final$extant, fct = data_final)
gg_miss_fct(x = data_final[4:23], fct = data_final$extant)
gg_miss_upset(data_final)
vis_miss(data_final[3:23]
)
vis_miss(data_final[4:22]
vis_miss(data_final[4:22]
vis_miss(data_final[4:22])
vis_miss(data_final[1:22])
vis_miss(data_final[4:27])
vis_miss(data_final[3:27])
asd <- lm(data_final1$BMR ~ data_final1$IUCN.status*data_final1$activity)
asd
anova(asd)
asd <- lm(data_final1$BMR*data_final1$activity ~ data_final1$IUCN.status)
asd <- lm(data_final1$BMR ~ data_final1$IUCN.status*data_final1$activity)
??sensiPhy
sessionInfo()
packageVersion("sensiPhy")
packageVersion("ape")
packageVersion("BAMMtools")
packageVersion("caper")
packageVersion("dplyr")
packageVersion("easystats")
packageVersion("ggplot2")
packageVersion("ggtree")
packageVersion("lattice")
packageVersion("mice")
packageVersion("mulTree")
packageVersion("naniar")
packageVersion("phylolm")
packageVersion("phytools")
packageVersion("psych")
packageVersion("vegan")
install.packages(c("dplyr", "psych"))
install.packages(c("ape", "blob", "brms", "broom", "caret", "colorspace", "commonmark", "datawizard", "dbplyr", "deSolve", "digest", "distributional", "dplyr", "dtplyr", "fansi", "FNN", "googledrive", "GPArotation", "gtable", "hexbin", "hms", "htmlwidgets", "insight", "lavaan", "lme4", "memisc", "modelr", "MuMIn", "OpenMx", "parallelly", "pillar", "posterior", "ps", "psych", "qgraph", "Rcpp", "RcppParallel", "renv", "report", "rlang", "scatterplot3d", "sf", "testthat", "tibble", "vctrs", "wk", "XML"))
install.packages(c("MASS", "survival"), lib="C:/Program Files/R/R-4.2.1/library")
install.packages(c("ape", "caret", "colorspace", "datawizard", "deSolve", "digest", "dplyr", "fansi", "gtable", "insight", "lme4", "OpenMx", "psych", "qgraph", "Rcpp", "RcppParallel", "report", "rlang", "sf", "tibble", "vctrs", "XML"))
install.packages(c("MASS", "survival"), lib="C:/Program Files/R/R-4.2.1/library")
install.packages(c("MASS", "survival"), lib = "C:/Program Files/R/R-4.2.1/library")
install.packages(c("ape", "caret", "colorspace", "datawizard", "deSolve", "digest", "dplyr", "fansi", "gtable", "insight", "lme4", "OpenMx", "psych", "qgraph", "Rcpp", "RcppParallel", "report", "rlang", "sf", "tibble", "vctrs", "XML"))
unloadNamespace()
install.packages("ape")
unloadNamespace()
library(Seurat)
install.packages("Seurat")
library(Seurat)
unloadNamespace()
unload()
unload(ape)
pryr::mem_used()
install.packages("pryr")
require(pryr)
unloadNamespace()
pryr::mem_used()
unloadNamespace()
unload(ape)
unloadNamespace()
sessionInfo()
unloadNamespace()
asd <- sessionInfo()
asd$running
asd$loadedOnly
asd$otherPkgs
unloadNamespace()
unloadNamespace()
library(ape)
detach("package:ape", unload = TRUE)
invisible(lapply(paste0('package:', names(sessionInfo()$otherPkgs)), detach, character.only=TRUE, unload=TRUE))
unloadNamespace()
install.packages("ape")
lapply(names(sessionInfo()$loadedOnly), require, character.only = TRUE)
invisible(lapply(paste0('package:', names(sessionInfo()$otherPkgs)), detach, character.only=TRUE, unload=TRUE, force=TRUE))
Y
Y
lapply(names(sessionInfo()$loadedOnly), require, character.only = TRUE)
invisible(lapply(paste0('package:', names(sessionInfo()$otherPkgs)), detach, character.only=TRUE, unload=TRUE, force=TRUE))
sessionInfo()
unloadNamespace(loadedNamespaces())
invisible(lapply(paste0('package:', names(sessionInfo()$otherPkgs)), detach, character.only=TRUE, unload=TRUE))
names(sessionInfo()$otherPkgs)
detachAllPackages <- function() {
basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
package.list <- setdiff(package.list,basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
}
detachAllPackages()
install.packages("ape")
detachAllPackages()
loadedNamespaces()
install.packages("nothing")
require(nothing, quietly = TRUE)
loadedNamespaces()
nothing
require(nothing, quietly = TRUE)
detach(aperm())
detach(ape)
detach("ape")
sess.pkgs <- function (package = NULL)
{   z <- list()
if (is.null(package)) {
package <- grep("^package:", search(), value = TRUE)
keep <- sapply(package, function(x) x == "package:base" ||
!is.null(attr(as.environment(x), "path")))
package <- sub("^package:", "", package[keep])
}
pkgDesc <- lapply(package, packageDescription)
if (length(package) == 0)
stop("no valid packages were specified")
basePkgs <- sapply(pkgDesc, function(x) !is.null(x$Priority) &&
x$Priority == "base")
z$basePkgs <- package[basePkgs]
if (any(!basePkgs)) {
z$otherPkgs <-  package[!basePkgs]
}
z
}
lapply(paste("package:",sess.pkgs()$otherPkgs, sep=""), detach,
character.only = TRUE, unload = TRUE)
lapply(paste("package:", names(sessionInfo()$otherPkgs), sep=""), detach, character.only = TRUE, unload = TRUE)
